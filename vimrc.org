#+property: header-args:vimrc :tangle .vimrc
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+BEGIN_SRC vimrc :exports none
  " Zyst

  " DO NOT EDIT THIS FILE DIRECTLY
  " This is a file generated from a literate programing source file located at
  " https://github.com/Zyst/dotfiles/blob/master/vimrc.org
  " You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+END_SRC

#+title: My Nvim/Vim config file
#+author: Erick Romero

This is my Emacs configuration file.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[file:.vimrc][.vimrc]] for the generated file.

* References

This is based on [[https://github.com/zzamboni][zzamboni's]] [[https://github.com/zzamboni/dot-emacs][dot-emacs]]. Huge props to them!

* Package management

First, I add a global variable which makes multi-platform stuff easier generally speaking. This variable can be found in the [[*System-specific configuration][System-specific configuration]] section.

#+BEGIN_SRC vimrc :noweb yes
  <<os-global>>
#+END_SRC

I use [[https://github.com/junegunn/vim-plug][junegunn/vim-plug]] to manage my vim dependencies. First we will try to autoinstall ~vim-plug~ if we don't have it installed already, and are not on Windows. On Windows we go to the repo, and follow the instructions there to install it by hand.

#+BEGIN_SRC vimrc
  if !(g:os == "Windows")
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
  endif
#+END_SRC

We then call the start function for plug, setting different folders for vim, and neovim to install their dependencies. The ~plug#end()~ function is called at the end of this package management section.

#+BEGIN_SRC vimrc
if has('nvim')
  call plug#begin('~/.config/nvim/plugged')
else
  call plug#begin('~/.vim/plugged')
endif
#+END_SRC

Now we create a reference block for our plugins, where our Plugins will be inserted, but the import itself will be done in their relevant areas.

#+BEGIN_SRC vimrc :noweb yes
  <<plug>>
#+END_SRC

Finally, we close our ~plug#begin~ block.

#+BEGIN_SRC vimrc
  call plug#end()
#+END_SRC

* Keybindings
** Leader

Keep stealing stuff from https://github.com/wincent/wincent/blob/master/roles/dotfiles/files/.vim/plugin/mappings/leader.vim

- We map our leader key to be =Space=.

#+BEGIN_SRC vimrc
  let mapleader="\<Space>"
#+END_SRC

- We also set our local leader key.

#+BEGIN_SRC vimrc
  let maplocalleader="\\"
#+END_SRC

- We make =<Leader> <Leader>= open the last buffer.

#+BEGIN_SRC vimrc
  nnoremap <Leader><Leader> <C-^>
#+END_SRC

- Make =<Leader>= and =o= close all other buffers.

#+BEGIN_SRC vimrc
  nnoremap <Leader>o :only<CR>
#+END_SRC

** Normal mode

Steal stuff from https://github.com/wincent/wincent/blob/master/roles/dotfiles/files/.vim/plugin/mappings/normal.vim

- Make =tab= toggle folds at current position.

#+BEGIN_SRC vimrc
  nnoremap <Tab> za
#+END_SRC

- Move between panes in normal mode with =Ctrl= + =hjkl=.

#+BEGIN_SRC vimrc
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
#+END_SRC

** Visual

- Move between panes in visual mode, same as other modes.

#+BEGIN_SRC vimrc
  xnoremap <C-h> <C-w>h
  xnoremap <C-j> <C-w>j
  xnoremap <C-k> <C-w>k
  xnoremap <C-l> <C-w>l
#+END_SRC

* Settings

- We disable arrow keys in Vim, this is the first setting I added, and I like to keep it around for fun.

#+BEGIN_SRC vimrc
  noremap <Up> <NOP>
  noremap <Down> <NOP>
  noremap <Left> <NOP>
  noremap <Right> <NOP>
#+END_SRC

- We disable module functionality [[https://www.techrepublic.com/blog/it-security/turn-off-modeline-support-in-vim/][for security]].

#+BEGIN_SRC vimrc
  set nomodeline
#+END_SRC

- Language type indentation [[https://vi.stackexchange.com/a/10125][this response]] describes each option in detail, but essentially it lets plugins handle indentation, and a few other things when possible.

#+BEGIN_SRC vimrc
  filetype indent plugin on
#+END_SRC

- Shares the system clipboard.

#+BEGIN_SRC vimrc
  set clipboard=unnamed
#+END_SRC

- We display line numbers.

#+BEGIN_SRC vimrc
  set number
#+END_SRC

- We make it so that when we leave a buffer, that buffer uses normal line numbers, but if we are on the buffer we use relative line numbers.

#+BEGIN_SRC vimrc
  augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,WinEnter * if &nu | set rnu   | endif
    autocmd BufLeave,FocusLost,WinLeave   * if &nu | set nornu | endif
  augroup END
#+END_SRC

- We =set hidden= which does some operations around renames, and others.

#+BEGIN_SRC vimrc
  set hidden
#+END_SRC

- Makes it so that =.vimrc= is autoreloaded when we write changes to it.

#+BEGIN_SRC vimrc
  augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
  augroup END
#+END_SRC

- Allows backspace to work 'normally'.

#+BEGIN_SRC vimrc
  set backspace=indent,eol,start
#+END_SRC

- Enables folding for files, sets the indentation method to =indent= which folds based on indentation levels, and sets the fold level we start out with files to =10=, which starts out files unfolded up to the =10='th level of indentation.

#+BEGIN_SRC vimrc
  set foldenable
  set foldmethod=indent
  set foldlevelstart=10
#+END_SRC

* System-specific configuration

Some settings are OS-specific, and this is where we set them.

First, we add a variable ~g:os~ which will hold our OS information, for now, our main concern is focused around the following three variable possible values: ~Windows~, ~Linux~, and ~Darwin~ (OS X).

We also want an additional entry for "Unix" systems, in our case, Linux, and OS X can share a lot of configuration, so we will create an extra entry for that.

#+begin_src vimrc :tangle no :noweb-ref os-global
  if !exists("g:os")
      if has("win64") || has("win32") || has("win16")
          let g:os = "Windows"
      else
          let g:os = substitute(system('uname'), '\n', '', '')
      endif
  endif
#+end_src

Then, we add our OS-specific configuration from the sections below:

#+BEGIN_SRC vimrc :noweb no-export
  if g:os == "Linux"
      <<Linux settings>>
  endif

  if g:os == "Windows"
      <<Windows settings>>
  endif

  if g:os == "Darwin"
      <<Mac settings>>
  endif

  if (g:os == "Linux") || (g:os == "Darwin")
      <<Unix settings>>
  endif
#+END_SRC

** Linux
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Linux settings
:END:

There are no Linux-specific settings for now.

** Windows
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Windows settings
:END:

There are no Windows-specific settings for now.

** Mac
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Mac settings
:END:

There are no Mac-specific settings for now.

** Unix
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Unix settings
:END:

There are no Unix-specific settings for now.

* Org mode

We will setup org mode later, for now, just get shit running. Reference [[file:init.org][init.org]] for reference on how to structure org mode.

* Appearance, buffer/file management and theming

Here we take care of all the visual, and UX settings.

We enable ~termguicolors~, which is necessary to use GUI colors inside terminals.

#+BEGIN_SRC vimrc
  if (has("termguicolors"))
    set termguicolors
  endif
#+END_SRC

We also want to set ~syntax~ to ~on~, which makes the editor allow syntax highlighting.

#+BEGIN_SRC vimrc
  syntax on
#+END_SRC

** Theme

Our theme is the bespoke [[https://github.com/Zyst/egoist-one.vim][Zyst/egoist-one.vim]], which is in turn based on [[https://github.com/joshdick/onedark.vim][joshdick/onedark.vim]]. It customizes some elements to my liking.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'Zyst/egoist-one.vim'
#+END_SRC

We proceed to assign our ~colorscheme~ as ~onedark~

#+BEGIN_SRC vimrc
  colorscheme onedark
#+END_SRC

Finally, we set ~g:onedark_terminal_italics~ to ~1~ which enables some of the theme's italics functionality.

#+BEGIN_SRC vimrc
  let g:onedark_terminal_italics=1
#+END_SRC

** Fuzzy finder

We use two fuzzy finders, depending on the operating system, If we are on Unix systems, then we use [[https://github.com/wincent/command-t][wincent/command-t]], otherwise (Windows, in my case) we use [[https://github.com/ctrlpvim/ctrlp.vim][ctrlpvim/ctrlp.vim]].

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  if !(g:os == "Windows")
    Plug 'wincent/command-t', {
          \   'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'
          \ }
  else
    Plug 'ctrlpvim/ctrlp.vim'
  endif
#+END_SRC

*** Command-T configuration
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Unix settings
:END:

- These are the default hotkeys:

The following mappings are active when the prompt has focus:

#+BEGIN_SRC text
  <BS>        delete the character to the left of the cursor
  <Del>       delete the character at the cursor
  <Left>      move the cursor one character to the left
  <C-h>       move the cursor one character to the left
  <Right>     move the cursor one character to the right
  <C-l>       move the cursor one character to the right
  <C-a>       move the cursor to the start (left)
  <C-e>       move the cursor to the end (right)
  <C-u>       clear the contents of the prompt
  <Tab>       change focus to the file listing
#+END_SRC

The following mappings are active when the file listing has focus:

#+BEGIN_SRC text
  <Tab>       change focus to the prompt
#+END_SRC

The following mappings are active when either the prompt or the file listing
has focus:

#+BEGIN_SRC text
  <CR>        open the selected file
  <C-CR>      open the selected file in a new split window
  <C-s>       open the selected file in a new split window
  <C-v>       open the selected file in a new vertical split window
  <C-t>       open the selected file in a new tab
  <C-d>       delete the selected buffer
  <C-j>       select next file in the file listing
  <C-n>       select next file in the file listing
  <Down>      select next file in the file listing
  <C-k>       select previous file in the file listing
  <C-p>       select previous file in the file listing
  <Up>        select previous file in the file listing
  <C-f>       flush the cache (see |:CommandTFlush| for details)
  <C-q>       place the current matches in the quickfix window
  <C-c>       cancel (dismisses file listing)
#+END_SRC

The following is also available on terminals which support it:

#+BEGIN_SRC text
  <Esc>       cancel (dismisses file listing)
#+END_SRC

- We remap =Leader= + =b= to use =CommandTMRU= instead of =CommandTBuffer=, which shows files in the most recently used order, rather than the default.

#+BEGIN_SRC vimrc
  nnoremap <silent> <leader>b :CommandTMRU<CR>
#+END_SRC

- We make the set of keys that close the search buffer different, =Escape= and =Ctrl= + =c= handle it.

#+BEGIN_SRC vimrc
  let g:CommandTCancelMap=['<ESC>', '<C-c>']
#+END_SRC

- Switch encoding so that it is =UTF-8= by default.

#+BEGIN_SRC vimrc
  let g:CommandTEncoding='UTF-8'
#+END_SRC

- We make the file scanner ~watchman~. which falls back to =find= by default.

#+BEGIN_SRC vimrc
  let g:CommandTFileScanner='watchman'
#+END_SRC

*** ctrlp.vim configuration
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Windows settings
:END:

Allow ctrlp ignore the files inside of ~.gitignore~ files.

#+BEGIN_SRC vimrc
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
#+END_SRC

* Coding

** General settings and modules

DEOPLETE/LSP WILL GO HERE.

With =company-mode=, we get automatic completion - when there are completions available, a popup menu will appear when you stop typing for a moment, and you can either continue typing or accept the completion using the Enter key. I enable it globally.

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook
    (after-init . global-company-mode))
#+end_src

=projectile-mode= allows us to perform project-relative operations such as searches, navigation, etc.

#+begin_src emacs-lisp
  (use-package projectile
    :defer 2
    :diminish projectile-mode
    :config
    (projectile-global-mode))
#+end_src

On-the-fly spell checking. I enable it for all text modes.

#+begin_src emacs-lisp
  (use-package flyspell
    :defer 1
    :hook (text-mode . flyspell-mode)
    :diminish
    :bind (:map flyspell-mouse-map
                ([down-mouse-3] . #'flyspell-correct-word)
                ([mouse-3]      . #'undefined)))
#+end_src

** Programming languages

*** Polyglot

Our main language handler is [[https://github.com/sheerun/vim-polyglot][sheerun/vim-polyglot]] which helps us program in a [[https://github.com/sheerun/vim-polyglot#language-packs][variety of languages]] with minimal performance impact, since plugins are loaded on-demand. I'm giving this a try, rather than using individual packages.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'sheerun/vim-polyglot'
#+END_SRC

*** Elvish

[[https://github.com/dmix/elvish.vim][dmix/elvish.vim]] adds limited support for the [[https://github.com/elves/elvish][elvish shell]], essentially limited to syntax highlighting.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'dmix/elvish.vim', { 'on_ft': ['elvish']}
#+END_SRC

* Other tools

** Vim commentary

[[https://github.com/tpope/vim-commentary][tpope/vim-commentary]] is a plugin that allows us to comment out code in a very natural way with a motion mainly mapped to ~gc~.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'tpope/vim-commentary'
#+END_SRC

** Vim surround

[[https://github.com/tpope/vim-surround][tpope/vim-surround]] is all about "surroundings": parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'tpope/vim-surround'
#+END_SRC

** Vim/Tmux interplay

We use [[https://github.com/christoomey/vim-tmux-navigator][christoomey/vim-tmux-navigator]] to allow us to switch between Vim, and Tmux panes effortlessly, using ~Ctrl + hjkl~.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'christoomey/vim-tmux-navigator'
#+END_SRC

* General text editing

In addition to coding, I configure some modes that can be used for text editing.

- [[https://daringfireball.net/projects/markdown/syntax][Markdown]], generally useful. I also set up variable pitch and visual line mode.

  #+begin_src emacs-lisp
    (use-package markdown-mode
      :hook
      (markdown-mode . visual-line-mode)
      (markdown-mode . variable-pitch-mode))
  #+end_src
