#+property: header-args:vimrc :tangle .vimrc
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+BEGIN_SRC vimrc :exports none
  " Zyst

  " DO NOT EDIT THIS FILE DIRECTLY
  " This is a file generated from a literate programing source file located at
  " https://github.com/Zyst/dotfiles/blob/master/vimrc.org
  " You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+END_SRC

#+title: My Nvim/Vim config file
#+author: Erick Romero

This is my Emacs configuration file.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[file:.vimrc][.vimrc]] for the generated file.

* References

This is based on [[https://github.com/zzamboni][zzamboni's]] [[https://github.com/zzamboni/dot-emacs][dot-emacs]]. Huge props to them!

* Package management

First, I add a global variable which makes multi-platform stuff easier generally speaking. This variable can be found in the [[*System-specific configuration][System-specific configuration]] section.

#+BEGIN_SRC vimrc :noweb yes
  <<os-global>>
#+END_SRC

I use [[https://github.com/junegunn/vim-plug][junegunn/vim-plug]] to manage my vim dependencies. First we will try to autoinstall ~vim-plug~ if we don't have it installed already, and are not on Windows. On Windows we go to the repo, and follow the instructions there to install it by hand.

#+BEGIN_SRC vimrc
  if !(g:os == "Windows")
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
  endif
#+END_SRC

We then call the start function for plug, setting different folders for vim, and neovim to install their dependencies. The ~plug#end()~ function is called at the end of this package management section.

#+BEGIN_SRC vimrc
if has('nvim')
  call plug#begin('~/.config/nvim/plugged')
else
  call plug#begin('~/.vim/plugged')
endif
#+END_SRC

Now we create a reference block for our plugins, where our Plugins will be inserted, but the import itself will be done in their relevant areas.

#+BEGIN_SRC vimrc :noweb yes
  <<plug>>
#+END_SRC

Finally, we close our ~plug#begin~ block.

#+BEGIN_SRC vimrc
  call plug#end()
#+END_SRC

* Settings

** Miscellaneous settings

hold

* System-specific configuration

Some settings are OS-specific, and this is where we set them.

First, we add a variable ~g:os~ which will hold our OS information, for now, our main concern is focused around the following three variable possible values: ~Windows~, ~Linux~, and ~Darwin~ (OS X).

#+begin_src vimrc :tangle no :noweb-ref os-global
  if !exists("g:os")
      if has("win64") || has("win32") || has("win16")
          let g:os = "Windows"
      else
          let g:os = substitute(system('uname'), '\n', '', '')
      endif
  endif
#+end_src

Then, we add our OS-specific configuration from the sections below:

#+BEGIN_SRC vimrc :noweb no-export
  if g:os == "Darwin"
      <<Mac settings>>
  endif

  if g:os == "Linux"
      <<Linux settings>>
  endif

  if g:os == "Windows"
      <<Windows settings>>
  endif
#+END_SRC

** Mac
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Mac settings
:END:

There are no Mac-specific settings for now.

#+BEGIN_SRC vimrc
  nnoremap <leader>t :term <CR>
#+END_SRC

** Linux
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Linux settings
:END:

There are no Linux-specific settings for now.

#+BEGIN_SRC vimrc
  nnoremap <leader>t :term <CR>
#+END_SRC

** Windows
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Windows settings
:END:

There are no Windows-specific settings for now.

#+BEGIN_SRC vimrc
  nnoremap <leader>t :term "C:\Program Files\Git\bin\bash.exe" <CR>
#+END_SRC

* Org mode

We will setup org mode later, for now, just get shit running. Reference [[file:init.org][init.org]] for reference on how to structure org mode.

* Appearance, buffer/file management and theming

Here we take care of all the visual, and UX settings.

We enable ~termguicolors~, which is necessary to use GUI colors inside terminals.

#+BEGIN_SRC vimrc
  if (has("termguicolors"))
    set termguicolors
  endif
#+END_SRC

We also want to set ~syntax~ to ~on~, which makes the editor allow syntax highlighting.

#+BEGIN_SRC vimrc
  syntax on
#+END_SRC

** Theme

Our theme is the bespoke [[https://github.com/Zyst/egoist-one.vim][Zyst/egoist-one.vim]], which is in turn based on [[https://github.com/joshdick/onedark.vim][joshdick/onedark.vim]]. It customizes some elements to my liking.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'Zyst/egoist-one.vim'
#+END_SRC

We proceed to assign our ~colorscheme~ as ~onedark~

#+BEGIN_SRC vimrc
  colorscheme onedark
#+END_SRC

Finally, we set ~g:onedark_terminal_italics~ to ~1~ which enables some of the theme's italics functionality.

#+BEGIN_SRC vimrc
  let g:onedark_terminal_italics=1
#+END_SRC

* Coding

Coding is my primary use for Vim, here's my configuration.

** General settings and modules

With =company-mode=, we get automatic completion - when there are completions available, a popup menu will appear when you stop typing for a moment, and you can either continue typing or accept the completion using the Enter key. I enable it globally.

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook
    (after-init . global-company-mode))
#+end_src

=projectile-mode= allows us to perform project-relative operations such as searches, navigation, etc.

#+begin_src emacs-lisp
  (use-package projectile
    :defer 2
    :diminish projectile-mode
    :config
    (projectile-global-mode))
#+end_src

On-the-fly spell checking. I enable it for all text modes.

#+begin_src emacs-lisp
  (use-package flyspell
    :defer 1
    :hook (text-mode . flyspell-mode)
    :diminish
    :bind (:map flyspell-mouse-map
                ([down-mouse-3] . #'flyspell-correct-word)
                ([mouse-3]      . #'undefined)))
#+end_src

** Programming languages

*** Polyglot

Our main language handler is [[https://github.com/sheerun/vim-polyglot][sheerun/vim-polyglot]] which helps us program in a [[https://github.com/sheerun/vim-polyglot#language-packs][variety of languages]] with minimal performance impact, since plugins are loaded on-demand. I'm giving this a try, rather than using individual packages.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'sheerun/vim-polyglot'
#+END_SRC

*** Elvish

[[https://github.com/dmix/elvish.vim][dmix/elvish.vim]] adds limited support for the [[https://github.com/elves/elvish][elvish shell]], essentially limited to syntax highlighting.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'dmix/elvish.vim', { 'on_ft': ['elvish']}
#+END_SRC

* Other tools

** Vim/Tmux interplay

We use [[https://github.com/christoomey/vim-tmux-navigator][christoomey/vim-tmux-navigator]] to allow us to switch between Vim, and Tmux panes effortlessly, using ~Ctrl + hjkl~.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'christoomey/vim-tmux-navigator'
#+END_SRC

* General text editing

In addition to coding, I configure some modes that can be used for text editing.

- [[https://daringfireball.net/projects/markdown/syntax][Markdown]], generally useful. I also set up variable pitch and visual line mode.

  #+begin_src emacs-lisp
    (use-package markdown-mode
      :hook
      (markdown-mode . visual-line-mode)
      (markdown-mode . variable-pitch-mode))
  #+end_src
