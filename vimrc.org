#+property: header-args:vimrc :tangle .vimrc
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+BEGIN_SRC vimrc :exports none
  " Zyst

  " DO NOT EDIT THIS FILE DIRECTLY
  " This is a file generated from a literate programing source file located at
  " https://github.com/Zyst/dotfiles/blob/master/vimrc.org
  " You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+END_SRC

#+title: My Nvim/Vim config file
#+author: Erick Romero

This is my Vim configuration file.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[file:.vimrc][.vimrc]] for the generated file.

* References

This is based on [[https://github.com/zzamboni][zzamboni's]] [[https://github.com/zzamboni/dot-emacs][dot-emacs]]. Huge props to them!

* Package management

First, I add a global variable which makes multi-platform stuff easier generally speaking. This variable can be found in the [[*System-specific configuration][System-specific configuration]] section.

#+BEGIN_SRC vimrc :noweb yes
  <<os-global>>
#+END_SRC

I use [[https://github.com/junegunn/vim-plug][junegunn/vim-plug]] to manage my vim dependencies. First we will try to autoinstall ~vim-plug~ if we don't have it installed already, and are not on Windows. On Windows we go to the repo, and follow the instructions there to install it by hand.

#+BEGIN_SRC vimrc
  if !(g:os == "Windows")
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
  endif
#+END_SRC

We then call the start function for plug, setting different folders for vim, and neovim to install their dependencies. The ~plug#end()~ function is called at the end of this package management section.

We also add two reference blocks, =nvim plug= and =vim plug= to ass vim/nvim specific plugins.

#+BEGIN_SRC vimrc :noweb yes
  if has('nvim')
    call plug#begin('~/.config/nvim/plugged')
        <<nvim plug>>
  else
    call plug#begin('~/.vim/plugged')
        <<vim plug>>
  endif
#+END_SRC

Now we create a reference block for our plugins, where our Plugins will be inserted, but the import itself will be done in their relevant areas.

#+BEGIN_SRC vimrc :noweb yes
  <<plug>>
#+END_SRC

Finally, we close our ~plug#begin~ block.

#+BEGIN_SRC vimrc
  call plug#end()
#+END_SRC

* Keybindings

** Leader

Keep stealing stuff from https://github.com/wincent/wincent/blob/master/roles/dotfiles/files/.vim/plugin/mappings/leader.vim

- We map our leader key to be =Space=.

#+BEGIN_SRC vimrc
  let mapleader="\<Space>"
#+END_SRC

- We also set our local leader key.

#+BEGIN_SRC vimrc
  let maplocalleader="\\"
#+END_SRC

- We make =<Leader> <Leader>= open the last buffer.

#+BEGIN_SRC vimrc
  nnoremap <Leader><Leader> <C-^>
#+END_SRC

- Make =<Leader>= and =o= close all other buffers.

#+BEGIN_SRC vimrc
  nnoremap <Leader>o :only<CR>
#+END_SRC

- Make =<Leader>= and =w= write the current file.

#+BEGIN_SRC vimrc
  nnoremap <Leader>w :w<CR>
#+END_SRC

- Make =<Leader>= and =q= close the current buffer.

#+BEGIN_SRC vimrc
  nnoremap <Leader>q :q<CR>
#+END_SRC

** Normal mode

Steal stuff from https://github.com/wincent/wincent/blob/master/roles/dotfiles/files/.vim/plugin/mappings/normal.vim

- We disable arrow keys in Vim, this is the first setting I added, and I like to keep it around for fun.

#+BEGIN_SRC vimrc
  noremap <Up> <NOP>
  noremap <Down> <NOP>
  noremap <Left> <NOP>
  noremap <Right> <NOP>
#+END_SRC

- Make =tab= toggle folds at current position.

#+BEGIN_SRC vimrc
  nnoremap <Tab> za
#+END_SRC

- Move between panes in normal mode with =Ctrl= + =hjkl=.

#+BEGIN_SRC vimrc
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
#+END_SRC

- Pressing =<Esc> <Esc>= disables/hides the progressive search mode.

#+BEGIN_SRC vimrc
  nmap <Esc><Esc> :noh<CR><Esc>
#+END_SRC

- =<Leader> + e + v= opens our vimrc file in a new vertical split.

#+BEGIN_SRC vimrc
  nnoremap <Leader>ev :vsp ~/.vimrc<CR>
#+END_SRC

** Visual

- Move between panes in visual mode, same as other modes.

#+BEGIN_SRC vimrc
  xnoremap <C-h> <C-w>h
  xnoremap <C-j> <C-w>j
  xnoremap <C-k> <C-w>k
  xnoremap <C-l> <C-w>l
#+END_SRC

- J and K can be used to move selected lines in visual mode.

#+BEGIN_SRC vimrc
  vnoremap <S-j> :m '>+1<CR>gv=gv
  vnoremap <S-k> :m '<-2<CR>gv=gv
#+END_SRC

* Settings

- We disable module functionality [[https://www.techrepublic.com/blog/it-security/turn-off-modeline-support-in-vim/][for security]].

#+BEGIN_SRC vimrc
  set nomodeline
#+END_SRC

- Language type indentation [[https://vi.stackexchange.com/a/10125][this response]] describes each option in detail, but essentially it lets plugins handle indentation, and a few other things when possible.

#+BEGIN_SRC vimrc
  filetype indent plugin on
#+END_SRC

- Shares the system clipboard.

#+BEGIN_SRC vimrc
  set clipboard+=unnamedplus
#+END_SRC

- We display line numbers.

#+BEGIN_SRC vimrc
  set number
#+END_SRC

- We make it so that when we leave a buffer, that buffer uses normal line numbers, but if we are on the buffer we use relative line numbers.

#+BEGIN_SRC vimrc
  augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,WinEnter * if &nu | set rnu   | endif
    autocmd BufLeave,FocusLost,WinLeave   * if &nu | set nornu | endif
  augroup END
#+END_SRC

- We =set hidden= which does some operations around renames, and others. Also lets us hide buffers with unsaved changes without being promted.

#+BEGIN_SRC vimrc
  set hidden
#+END_SRC

- Makes it so that =.vimrc= is autoreloaded when we write changes to it.

#+BEGIN_SRC vimrc
  augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
  augroup END
#+END_SRC

- Allows backspace to work 'normally'.

#+BEGIN_SRC vimrc
  set backspace=indent,eol,start
#+END_SRC

- Enables folding for files, sets the indentation method to =indent= which folds based on indentation levels, and sets the fold level we start out with files to =10=, which starts out files unfolded up to the =10='th level of indentation.

#+BEGIN_SRC vimrc
  set foldenable
  set foldmethod=indent
  set foldlevelstart=10
#+END_SRC

- We set the fold level to =1=, which as [[https://www.youtube.com/watch?v=oqYQ7IeDs0E][Wincent's video on folding]] mentions, is good for getting into the habit of actually using the fold feature. /Disabled for now, I want to get into actually using the editor adequately before I attempt to min-max my feature usage/.

#+BEGIN_SRC vimrc
  " set foldlevelstart=1
#+END_SRC

- Copies the indentation from the previous line when creating a new line.

#+BEGIN_SRC vimrc
  set autoindent
#+END_SRC

- Smart indent automatically adds one extra level of indentation in some scenarios.

#+BEGIN_SRC vimrc
  set smartindent
#+END_SRC

- Sets encoding to UTF-8, can help avoid a ton of issues. This applies to the buffer, and to the written files.

#+BEGIN_SRC vimrc
  scriptencoding utf-8
  set encoding=utf-8
  set fileencoding=utf-8
#+END_SRC

- Highlight the current line we are on.

#+BEGIN_SRC vimrc
  set cursorline
#+END_SRC

- Make vim use spaces instead of tabs.

#+BEGIN_SRC vimrc
set expandtab
#+END_SRC

- Handle file history, and make sure the files are written to a separate folder.

#+BEGIN_SRC vimrc
  set undofile
  set undodir=~/.vim/undo_files//
  set directory=~/.vim/swap_files//
#+END_SRC

- We make vim always display our status line.

#+BEGIN_SRC vimrc
  set laststatus=2
#+END_SRC

- We set lazyredraw so we don't show screen changes when playing macros, or stuff like that.

#+BEGIN_SRC vimrc
  set lazyredraw
#+END_SRC

- We make long lines wrap into others based on the =breakat= setting, and we change the character we use to display line breaks. the character we use is: "DOWNWARDS ARROW WITH TIP RIGHTWARDS (U+21B3, UTF-8: E2 86 B3)"

#+BEGIN_SRC vimrc
  set linebreak
  let &showbreak='â†³ '
#+END_SRC

- We set our scrollout, which allows us to scroll a specified number of lines before we reach the "edge" of our screen.

#+BEGIN_SRC vimrc
  set scrolloff=1
#+END_SRC

- We add a =tabstop=, which specifies how many characters we should insert when when press tab. Similarly, a =softtabstop= specifies how many columns to insert when we press tab.

#+BEGIN_SRC vimrc
  set tabstop=2
  set softtabstop=2
#+END_SRC

- We add a =shiftwidth=, which inserts a number of spaces per tab, and commands like =<< >>=. We also set =shiftround= which itself lets us indent by a multiple of =shiftwidth= everytime.

#+BEGIN_SRC vimrc
  set shiftround
  set shiftwidth=2
#+END_SRC

- We make it so that when we insert a split, it opens below the current window, or to the right of the current window. Rather than up/left.

#+BEGIN_SRC vimrc
  set splitbelow
  set splitright
#+END_SRC

- Visually wraps lines that go past a limit, we also automatically set the corresponding wrap setting to 80 characters.

#+BEGIN_SRC vimrc
  set wrap
  set textwidth=80
#+END_SRC

- Highlights matching items like ({[]}).

#+BEGIN_SRC vimrc
  set showmatch
#+END_SRC

- Set search to search as you type characters, we also ingore case while searching.

#+BEGIN_SRC vimrc
  set incsearch
#+END_SRC

- For search, we make it so that when =ignorecase= and =smartcase= are both on, if a pattern contains an uppercase letter, it is case sensitive, otherwise, it is not. For example, =/The= would find only =The=, while =/the= would find =the= or =The= etc.

#+BEGIN_SRC vimrc
  set ignorecase
  set smartcase
#+END_SRC

- Make the cursor blink on errors, rather than beeping.

#+BEGIN_SRC vimrc
  set visualbell
#+END_SRC

- Sets ttyfast, which indicates a fast terminal connection, so it sends more characters to the screen for rendering.

#+BEGIN_SRC vimrc
  set ttyfast
#+END_SRC

- Sets =hlsearch=, which makes the characters we search shiny.

#+BEGIN_SRC vimrc
  set hlsearch
#+END_SRC

- We disable backup files generally speaking, some LanguageServers have issues with them.

#+BEGIN_SRC vimrc
  set nobackup
  set nowritebackup
#+END_SRC

- We make it so that =signcolumns= are always enabled so that some of our plugins which modify the sign column don't constantly move that around.

#+BEGIN_SRC vimrc
  set signcolumn=yes
#+END_SRC

* System-specific configuration

Some settings are OS-specific, and this is where we set them.

First, we add a variable ~g:os~ which will hold our OS information, for now, our main concern is focused around the following three variable possible values: ~Windows~, ~Linux~, and ~Darwin~ (OS X).

We also want an additional entry for "Unix" systems, in our case, Linux, and OS X can share a lot of configuration, so we will create an extra entry for that.

#+begin_src vimrc :tangle no :noweb-ref os-global
  if !exists("g:os")
      if has("win64") || has("win32") || has("win16")
          let g:os = "Windows"
      else
          let g:os = substitute(system('uname'), '\n', '', '')
      endif
  endif
#+end_src

Then, we add our OS-specific configuration from the sections below:

#+BEGIN_SRC vimrc :noweb no-export
  if g:os == "Linux"
      <<Linux settings>>
  endif

  if g:os == "Windows"
      <<Windows settings>>
  endif

  if g:os == "Darwin"
      <<Mac settings>>
  endif

  if (g:os == "Linux") || (g:os == "Darwin")
      <<Unix settings>>
  endif
#+END_SRC

** Linux
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Linux settings
:END:

There are no Linux-specific settings for now.

** Windows
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Windows settings
:END:

There are no Windows-specific settings for now.

** Mac
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Mac settings
:END:

There are no Mac-specific settings for now.

** Unix
:PROPERTIES:
:header-args:vimrc: :tangle no :noweb-ref Unix settings
:END:

There are no Unix-specific settings for now.

* Org mode

We will setup org mode later, for now, just get other stuff running. Reference [[file:init.org][init.org]] for reference on how to structure org mode.

* Appearance, buffer/file management and theming

Here we take care of all the visual, and UX settings.

We enable =termguicolors=, which is necessary to use GUI colors inside terminals.

#+BEGIN_SRC vimrc
  if (has("termguicolors"))
    set termguicolors
  endif
#+END_SRC

We also want to set ~syntax~ to ~on~, which makes the editor allow syntax highlighting.

#+BEGIN_SRC vimrc
  syntax on
#+END_SRC

** Theme

Our theme is the bespoke [[https://github.com/Zyst/egoist-one.vim][Zyst/egoist-one.vim]], which is in turn based on [[https://github.com/joshdick/onedark.vim][joshdick/onedark.vim]]. It customizes some elements to my liking.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'Zyst/egoist-one.vim'
#+END_SRC

We proceed to assign our ~colorscheme~ as ~onedark~.

#+BEGIN_SRC vimrc
  colorscheme onedark
#+END_SRC

Echo highlight group under cursor. This can be called using =:call HighlightEcho()= in our Vim commands. I mainly use this to find out the name of highlight groups I want to modify in my own theme.

#+BEGIN_SRC vimrc
  function g:HighlightEcho ()
    " Echo under mouse
    echom synIDattr(synID(line("."),col("."),1),"name")

    " Echo full group
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
  endfunction
#+END_SRC

Finally, we set ~g:onedark_terminal_italics~ to ~1~ which enables some of the theme's italics functionality.

#+BEGIN_SRC vimrc
  let g:onedark_terminal_italics=1
#+END_SRC

** CSS colors

Adding [[https://github.com/ap/vim-css-color][ap/vim-css-color]] allows us to have some variable color/background highlighting in our CSS files.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'ap/vim-css-color'
#+END_SRC

** Airline

We are going to add [[https://github.com/vim-airline/vim-airline][vim-airline/vim-airline]] which adds a nice status bar for us.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'vim-airline/vim-airline'
#+END_SRC

We want to disable some of our sections to reduce our levels of noise.

#+BEGIN_SRC
+-----------------------------------------------------------------------------+
|~                                                                            |
|~                                                                            |
|~                     VIM - Vi IMproved                                      |
|~                                                                            |
|~                       version 8.0                                          |
|~                    by Bram Moolenaar et al.                                |
|~           Vim is open source and freely distributable                      |
|~                                                                            |
|~           type :h :q<Enter>          to exit                               |
|~           type :help<Enter> or <F1>  for on-line help                      |
|~           type :help version8<Enter> for version info                      |
|~                                                                            |
|~                                                                            |
+-----------------------------------------------------------------------------+
| A | B |                     C                            X | Y | Z |  [...] |
+-----------------------------------------------------------------------------+

Where:

 section|meaning (example)
-------|------------------
  A    | displays the mode + additional flags like crypt/spell/paste (INSERT)
  B    | VCS information (branch, hunk summary) (master)
  C    | filename + read-only flag (~/.vim/vimrc RO)
  X    | filetype  (vim)
  Y    | file encoding[fileformat] (utf-8[unix])
  Z    | current position in the file
 [...] | additional sections (warning/errors/statistics) from external plugins (e.g. YCM, syntastic, ...)
#+END_SRC

We want to remove the VCS information, the filetype, the file encoding, and our current position in the file.

#+BEGIN_SRC vimrc
let g:airline_section_b = ''
let g:airline_section_x = ''
let g:airline_section_y = ''
let g:airline_section_z = ''
#+END_SRC

** Version control management

We add a few plugins to handle version control systems.

We use [[https://github.com/tpope/vim-fugitive][tpope/vim-fugitive]] for git integration, mainly around line changes.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'tpope/vim-fugitive'
#+END_SRC

We use  [[https://github.com/lewis6991/gitsigns.nvim][lewis6991/gitsigns.nvim]] for a git gutter with changes, added lines, and support for things like chunk level add/reset. If we ever find ourselves back on Vim we could use [[https://github.com/mhinz/vim-signify][mhinz/vim-signify]] but honestly I can't be bothered to even configure it as an alternative, realistically I don't think we ever really switch between them anymore.

#+BEGIN_SRC vimrc :tangle no :noweb-ref nvim plug
  Plug 'nvim-lua/plenary.nvim'
  Plug 'lewis6991/gitsigns.nvim'
#+END_SRC

We then initialize the plugin with "batteries included":

#+BEGIN_SRC vimrc
  :lua require('gitsigns').setup()
#+END_SRC

** Fuzzy finder

We use [[https://github.com/junegunn/fzf][junegunn/fzf]] for fuzzy finding.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
#+END_SRC

We want to add some hotkeys for opening files, buffers, and similar items:
  - =Space + t= - file search
  - =Space + b= - buffer search
  - =Space + s= - finds a line inside our buffer
  - =Space + S= - finds a line inside our project
  - =Space + g= - opens a filter with our modified files

#+BEGIN_SRC vimrc
  nnoremap <Leader>t :Files<cr>
  nnoremap <Leader>b :Buffers<cr>
  nnoremap <Leader>s :BLines<cr>
  nnoremap <Leader>S :Rg <cr>
  nnoremap <Leader>g :GFiles?<cr>
#+END_SRC

My hotkeys for opening in separate tabs, splits, and vertical splits will use =Ctrl + t=, =Ctrl + s=, and =Ctrl + v= respectively.

#+BEGIN_SRC vimrc
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit' }
#+END_SRC

- We make our FZF window a bit larger than the default:

#+BEGIN_SRC vimrc
  let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
#+END_SRC

- Use RipGrep for grepping:

#+BEGIN_SRC vimrc
  set grepprg=rg\ --vimgrep\ --smart-case\ --hidden\ --follow
#+END_SRC

- We let Ripgrep find the root of the project:

#+BEGIN_SRC vimrc
  if executable('rg')
    let g:rg_derive_root='true'
  endif
#+END_SRC

** Nerdtree

[[https://github.com/scrooloose/nerdtree][scrooloose/nerdtree]] is added for visual project exploration.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'scrooloose/nerdtree'
#+END_SRC

We make <Leader> and n open up nerdtree.

#+BEGIN_SRC vimrc
  nmap <Leader>n :NERDTreeFind<CR>
#+END_SRC

** Editor config

We add [[https://editorconfig.org/][editorconfig]] to Vim, which allows us to edit different projects with disparate configurations with ease.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'editorconfig/editorconfig-vim'
#+END_SRC

** Projectionist
I want to use [[https://github.com/tpope/vim-projectionist][vim-projectionst]], mainly for switching between alternate files.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'tpope/vim-projectionist'
#+END_SRC

*** Alternate file configuration

We configure the base global variable, with C support since it's fairly straight-forward to add.

#+BEGIN_SRC vimrc
  let g:projectionist_heuristics = {
  \   '*': {
  \     '*.c': {
  \       'alternate': '{}.h',
  \       'type': 'source'
  \     },
  \     '*.h': {
  \       'alternate': '{}.c',
  \       'type': 'header'
  \     },
  \
  \   }
  \ }
#+END_SRC

We then batch update JS/JSX/TS/TSX bindings using a super cool utility function by [[https://github.com/wincent][wincent]].

#+BEGIN_SRC vimrc
  " Helper function for batch-updating the g:projectionist_heuristics variable.
  function! s:project(...)
    for [l:pattern, l:projection] in a:000
      let g:projectionist_heuristics['*'][l:pattern] = l:projection
    endfor
  endfunction

  " Set up projections for JS variants.
  for s:extension in ['.js', '.jsx', '.ts', '.tsx']
    call s:project(
          \ ['*' . s:extension, {
          \   'alternate': [
          \     '{dirname}/{basename}.test' . s:extension,
          \     '{dirname}/__tests__/{basename}-test' . s:extension,
          \     '{dirname}/__tests__/{basename}.test' . s:extension,
          \     '{dirname}/__tests__/{basename}.test.js',
          \   ],
          \   'type': 'source'
          \ }],
          \ ['*.test' . s:extension, {
          \   'alternate': '{basename}' . s:extension,
          \   'type': 'test',
          \ }],
          \ ['**/__tests__/*-test' . s:extension, {
          \   'alternate': '{dirname}/{basename}' . s:extension,
          \   'type': 'test'
          \ }],
          \ ['**/__tests__/*.test' . s:extension, {
          \   'alternate': [
          \     '{dirname}/{basename}' . s:extension,
          \     '{dirname}/{basename}.tsx',
          \     '{dirname}/{basename}.ts',
          \     '{dirname}/{basename}.js',
          \     '{dirname}/{basename}.jsx',
          \    ],
          \   'type': 'test'
          \ }])
  endfor
#+END_SRC

Finally, we map =<Leader>= and =a= to go to our alternate file.

#+BEGIN_SRC vimrc
  nnoremap <Leader>a :A<CR>
#+END_SRC

* Coding

** General settings and modules

*** nvim-compe

We want to add [[https://github.com/hrsh7th/nvim-compe][hrsh7th/nvim-compe]] for fancy LSP auto complete support with Neovim.

#+BEGIN_SRC vimrc :tangle no :noweb-ref nvim plug
  Plug 'hrsh7th/nvim-compe'
#+END_SRC

We must set =completeopt= to =menuone,noselect=:

#+BEGIN_SRC vimrc
  set completeopt=menuone,noselect
#+END_SRC

We setup the plugin options.

#+BEGIN_SRC vimrc
  lua << EOF
  require'compe'.setup {
    enabled = true;
    autocomplete = true;
    debug = false;
    min_length = 1;
    preselect = 'enable';
    throttle_time = 80;
    source_timeout = 200;
    incomplete_delay = 400;
    max_abbr_width = 100;
    max_kind_width = 100;
    max_menu_width = 100;
    documentation = true;

    source = {
      path = true;
      buffer = true;
      calc = true;
      vsnip = true;
      nvim_lsp = true;
      nvim_lua = true;
      spell = true;
      tags = true;
      snippets_nvim = true;
      treesitter = true;
    };
  }
  EOF
#+END_SRC

Finally, we make the Tab, and Shift Tab bindings work to select options. This is copied from the compre README:

#+BEGIN_SRC vimrc
  lua << EOF
  local t = function(str)
    return vim.api.nvim_replace_termcodes(str, true, true, true)
  end

  local check_back_space = function()
      local col = vim.fn.col('.') - 1
      if col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') then
          return true
      else
          return false
      end
  end

  -- Use (s-)tab to:
  --- move to prev/next item in completion menuone
  --- jump to prev/next snippets placeholder
  _G.tab_complete = function()
    if vim.fn.pumvisible() == 1 then
      return t "<C-n>"
    elseif vim.fn.call("vsnip#available", {1}) == 1 then
      return t "<Plug>(vsnip-expand-or-jump)"
    elseif check_back_space() then
      return t "<Tab>"
    else
      return vim.fn['compe#complete']()
    end
  end
  _G.s_tab_complete = function()
    if vim.fn.pumvisible() == 1 then
      return t "<C-p>"
    elseif vim.fn.call("vsnip#jumpable", {-1}) == 1 then
      return t "<Plug>(vsnip-jump-prev)"
    else
      -- If <S-Tab> is not working in your terminal, change it to <C-h>
      return t "<S-Tab>"
    end
  end

  vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
  vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
  vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
  vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
  EOF
#+END_SRC

*** Float preview

We want to add [[https://github.com/ncm2/float-preview.nvim][ncm2/float-preview.nvim]]. This allows us to have documentation popups be way nicer. I just saw this on a post from [[https://oli.me.uk/getting-started-with-clojure-neovim-and-conjure-in-minutes/][Oliver Caldwell]].

#+BEGIN_SRC vimrc :tangle no :noweb-ref nvim plug
  Plug 'ncm2/float-preview.nvim'
#+END_SRC

This means we should disable the built in complete support, we'll be using the float stuff from Neovim.

#+BEGIN_SRC vimrc
  set completeopt-=preview
#+END_SRC

*** Language Server Protocol

We add [[https://github.com/neovim/nvim-lspconfig][neovim/nvim-lspconfig]] for our primary LSP configuration.

#+BEGIN_SRC vimrc :tangle no :noweb-ref nvim plug
  Plug 'neovim/nvim-lspconfig'
#+END_SRC

We also want to add [[https://github.com/kabouzeid/nvim-lspinstall][kabouzeid/nvim-lspinstall]] which allows us to easily install LSP servers using a syntax that looks like =:LspInstall <language>=.

#+BEGIN_SRC vimrc :tangle no :noweb-ref nvim plug
  Plug 'kabouzeid/nvim-lspinstall'
#+END_SRC

We configure our LSP Install configuration, and some hotkeys.

#+BEGIN_SRC vimrc
  lua << EOF
  -- keymaps
  local on_attach = function(client, bufnr)
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings.
    local opts = { noremap=true, silent=true }
    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'gr', '<Cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', 'gi', '<Cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', 'gh', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', 'gH', '<Cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', '<C-n>', '<Cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', '<C-p>', '<Cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
    buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)

    -- Set some keybinds conditional on server capabilities, temporarily disabled, we use ALE for formatting
    if client.resolved_capabilities.document_formatting then
      -- buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
    elseif client.resolved_capabilities.document_range_formatting then
      -- buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
    end

    -- Set autocommands conditional on server_capabilities
    if client.resolved_capabilities.document_highlight then
      vim.api.nvim_exec([[
      augroup lsp_document_highlight
      autocmd! * <buffer>
      autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
      autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
      ]], false)
    end
  end

  -- config that activates keymaps and enables snippet support
  local function make_config()
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities.textDocument.completion.completionItem.snippetSupport = true
    return {
      -- enable snippet support
      capabilities = capabilities,
      -- map buffer local keybindings when the language server attaches
      on_attach = on_attach,
    }
  end

  -- Check out https://github.com/kabouzeid/nvim-lspinstall/wiki
  -- To see how to manually install servers
  -- lsp-install
  local function setup_servers()
    require'lspinstall'.setup()

    -- get all installed servers
    local servers = require'lspinstall'.installed_servers()

    for _, server in pairs(servers) do
      local config = make_config()

      require'lspconfig'[server].setup(config)
    end
  end

  setup_servers()

  -- Automatically reload after `:LspInstall <server>` so we don't have to restart neovim
  require'lspinstall'.post_install_hook = function ()
    setup_servers() -- reload installed servers
    vim.cmd("bufdo e") -- this triggers the FileType autocmd that starts the server
  end
  EOF
#+END_SRC

*** Linter

We use [[https://github.com/w0rp/ale][w0rp/ale]] for linting, and more. It integrates very nicely with LSP as well.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'w0rp/ale'
#+END_SRC

We add configuration for our fixers. First, we want every filetype to remove trailing lines, and whitespace on save. Another filetype we want to cover is JavaScript, where we run both =prettier=, and =eslint --fix= in that order.

#+BEGIN_SRC vimrc
  let g:ale_fixers = {
  \   '*': ['remove_trailing_lines', 'trim_whitespace'],
  \   'javascript': ['prettier', 'eslint'],
  \   'typescript': ['prettier', 'eslint'],
  \   'typescriptreact': ['prettier', 'eslint'],
  \   'css': ['prettier'],
  \   'scss': ['prettier'],
  \   'html': ['prettier'],
  \   'json': ['prettier'],
  \}
#+END_SRC

We also want to configure linters, my JavaScript ones seem to work out of the box, but some other languages need a bit more config.

#+BEGIN_SRC vimrc
  let g:ale_linters = {
        \ 'clojure': ['clj-kondo', 'joker']
        \}
#+END_SRC

We make our formatting tool run on <Leader> and f.

#+BEGIN_SRC vimrc
  nmap <Leader>f <Plug>(ale_fix)
#+END_SRC

We also want to disable the built in LSP from ALE, since we're using the Neovim 0.5 integrated one.

#+BEGIN_SRC vimrc
  let g:ale_disable_lsp = 1
#+END_SRC

*** Autoclosing

[[https://github.com/jiangmiao/auto-pairs][jiangmiao/auto-pairs]] closes tags for us, like ({[]})

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'jiangmiao/auto-pairs'
#+END_SRC

*** Emmet

Using [[https://github.com/mattn/emmet-vim][mattn/emmet-vim]] we can use shorthands to create HTML/JSX structures. Ie: =table.our-table= -> ~<table class="our-table"></table>~

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'mattn/emmet-vim'
#+END_SRC

We remap the o

#+BEGIN_SRC vimrc
  let g:user_emmet_expandabbr_key = '<C-e>'
#+END_SRC

*** Conjure

[[https://github.com/Olical/conjure][Olical/conjure]] is a REPL/playground/evaluator/"Conversational Software Development" tool. I've started to try it out, and it feels super fun!

It helps with Clojure Development, but ties into more LISPs as well.

#+BEGIN_SRC vimrc :tangle no :noweb-ref nvim plug
  Plug 'Olical/conjure'
#+END_SRC

** Programming languages

*** Polyglot

Our main language handler is [[https://github.com/sheerun/vim-polyglot][sheerun/vim-polyglot]] which helps us program in a [[https://github.com/sheerun/vim-polyglot#language-packs][variety of languages]] with minimal performance impact, since plugins are loaded on-demand. I'm giving this a try, rather than using individual packages.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'sheerun/vim-polyglot'
#+END_SRC

*** Elvish

[[https://github.com/dmix/elvish.vim][dmix/elvish.vim]] adds limited support for the [[https://github.com/elves/elvish][elvish shell]], essentially limited to syntax highlighting.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'dmix/elvish.vim', { 'on_ft': ['elvish']}
#+END_SRC

* Other tools

** Vim commentary

[[https://github.com/tpope/vim-commentary][tpope/vim-commentary]] is a plugin that allows us to comment out code in a very natural way with a motion mainly mapped to ~gc~.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'tpope/vim-commentary'
#+END_SRC

** Vim surround

[[https://github.com/tpope/vim-surround][tpope/vim-surround]] is all about "surroundings": parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'tpope/vim-surround'
#+END_SRC

** Vim/Tmux interplay

We use [[https://github.com/christoomey/vim-tmux-navigator][christoomey/vim-tmux-navigator]] to allow us to switch between Vim, and Tmux panes effortlessly, using ~Ctrl + hjkl~.

#+BEGIN_SRC vimrc :tangle no :noweb-ref plug
  Plug 'christoomey/vim-tmux-navigator'
#+END_SRC

* General text editing

In addition to coding, I configure some modes that can be used for text editing.

No configuration for now, maybe spellchecking?
