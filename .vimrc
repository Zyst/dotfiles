" Zyst

" DO NOT EDIT THIS FILE DIRECTLY
" This is a file generated from a literate programing source file located at
" https://github.com/Zyst/dotfiles/blob/master/vimrc.org
" You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

if !exists("g:os")
    if has("win64") || has("win32") || has("win16")
        let g:os = "Windows"
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

if !(g:os == "Windows")
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

if has('nvim')
  call plug#begin('~/.config/nvim/plugged')
      Plug 'nvim-lua/plenary.nvim'
      Plug 'lewis6991/gitsigns.nvim'
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
      Plug 'ncm2/float-preview.nvim'
      Plug 'Olical/conjure'
else
  call plug#begin('~/.vim/plugged')
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'Zyst/egoist-one.vim'
Plug 'ap/vim-css-color'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
if !(g:os == "Windows")
  Plug 'wincent/command-t', {
        \   'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'
        \ }
else
  Plug 'ctrlpvim/ctrlp.vim'
endif
Plug 'scrooloose/nerdtree'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-projectionist'
" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }
Plug 'w0rp/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim'
Plug 'sheerun/vim-polyglot'
Plug 'dmix/elvish.vim', { 'on_ft': ['elvish']}
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

let mapleader="\<Space>"

let maplocalleader="\\"

nnoremap <Leader><Leader> <C-^>

nnoremap <Leader>o :only<CR>

nnoremap <Leader>w :w<CR>

nnoremap <Leader>q :q<CR>

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

nnoremap <Tab> za

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nmap <Esc><Esc> :noh<CR><Esc>

nnoremap <Leader>ev :vsp ~/.vimrc<CR>

xnoremap <C-h> <C-w>h
xnoremap <C-j> <C-w>j
xnoremap <C-k> <C-w>k
xnoremap <C-l> <C-w>l

vnoremap <S-j> :m '>+1<CR>gv=gv
vnoremap <S-k> :m '<-2<CR>gv=gv

set nomodeline

filetype indent plugin on

set clipboard+=unnamedplus

set number

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,WinLeave   * if &nu | set nornu | endif
augroup END

set hidden

augroup myvimrc
  au!
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

set backspace=indent,eol,start

set foldenable
set foldmethod=indent
set foldlevelstart=10

" set foldlevelstart=1

set autoindent

set smartindent

scriptencoding utf-8
set encoding=utf-8
set fileencoding=utf-8

set cursorline

set expandtab

set undofile
set undodir=~/.vim/undo_files//
set directory=~/.vim/swap_files//

set laststatus=2

set lazyredraw

set linebreak
let &showbreak='â†³ '

set scrolloff=1

set tabstop=2
set softtabstop=2

set shiftround
set shiftwidth=2

set splitbelow
set splitright

set wrap
set textwidth=80

set showmatch

set incsearch

set ignorecase
set smartcase

set visualbell

set ttyfast

set hlsearch

set nobackup
set nowritebackup

set signcolumn=yes

if g:os == "Linux"
    
endif

if g:os == "Windows"
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
endif

if g:os == "Darwin"
    
endif

if (g:os == "Linux") || (g:os == "Darwin")
    nnoremap <silent> <leader>b :CommandTMRU<CR>
    let g:CommandTCancelMap=['<ESC>', '<C-c>']
    let g:CommandTEncoding='UTF-8'
    " let g:CommandTFileScanner='watchman'
    let g:CommandTWildIgnore=&wildignore
    let g:CommandTWildIgnore.=',*/.git'
    let g:CommandTWildIgnore.=',*/.hg'
    let g:CommandTWildIgnore.=',*/bower_components'
    let g:CommandTWildIgnore.=',*/node_modules'
    let g:CommandTWildIgnore.=',*/tmp'
    let g:CommandTWildIgnore.=',*/vendor'
    let g:CommandTWildIgnore.=',*/dist'
    let g:CommandTWildIgnore.=',*/lcov-report'
    let g:CommandTWildIgnore.=',*/public/static'
    let g:CommandTWildIgnore.=',*/test-reports'
    let g:CommandTWildIgnore.=',*/__snapshots__'
    let g:CommandTWildIgnore.=',*/helm'
    let g:CommandTWildIgnore.=',*/pipeline'
    let g:CommandTWildIgnore.=',*/build'
    let g:CommandTWildIgnore.=',*/coverage'
endif

if (has("termguicolors"))
  set termguicolors
endif

syntax on

colorscheme onedark

function g:HighlightEcho ()
  " Echo under mouse
  echom synIDattr(synID(line("."),col("."),1),"name")

  " Echo full group
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction

let g:onedark_terminal_italics=1

let g:airline_section_b = ''
let g:airline_section_x = ''
let g:airline_section_y = ''
let g:airline_section_z = ''

:lua require('gitsigns').setup()

nmap <Leader>n :NERDTreeFind<CR>

let g:projectionist_heuristics = {
\   '*': {
\     '*.c': {
\       'alternate': '{}.h',
\       'type': 'source'
\     },
\     '*.h': {
\       'alternate': '{}.c',
\       'type': 'header'
\     },
\
\   }
\ }

" Helper function for batch-updating the g:projectionist_heuristics variable.
function! s:project(...)
  for [l:pattern, l:projection] in a:000
    let g:projectionist_heuristics['*'][l:pattern] = l:projection
  endfor
endfunction

" Set up projections for JS variants.
for s:extension in ['.js', '.jsx', '.ts', '.tsx']
  call s:project(
        \ ['*' . s:extension, {
        \   'alternate': [
        \     '{dirname}/{basename}.test' . s:extension,
        \     '{dirname}/__tests__/{basename}-test' . s:extension,
        \     '{dirname}/__tests__/{basename}.test' . s:extension,
        \     '{dirname}/__tests__/{basename}.test.js',
        \   ],
        \   'type': 'source'
        \ }],
        \ ['*.test' . s:extension, {
        \   'alternate': '{basename}' . s:extension,
        \   'type': 'test',
        \ }],
        \ ['**/__tests__/*-test' . s:extension, {
        \   'alternate': '{dirname}/{basename}' . s:extension,
        \   'type': 'test'
        \ }],
        \ ['**/__tests__/*.test' . s:extension, {
        \   'alternate': [
        \     '{dirname}/{basename}' . s:extension,
        \     '{dirname}/{basename}.tsx',
        \     '{dirname}/{basename}.ts',
        \     '{dirname}/{basename}.js',
        \     '{dirname}/{basename}.jsx',
        \    ],
        \   'type': 'test'
        \ }])
endfor

nnoremap <Leader>a :A<CR>

let g:deoplete#enable_at_startup = 1

inoremap <expr> <TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

call deoplete#custom#option('keyword_patterns', {'clojure': '[\w!$%&*+/:<=>?@\^_~\-\.#]*'})

set completeopt-=preview

" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>

" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>

" let g:LanguageClient_rootMarkers = {
"       \   'javascript': ['tsconfig.json', '.flowconfig', 'package.json'],
"       \   'typescript': ['tsconfig.json', '.flowconfig', 'package.json']
"       \ }

" let g:LanguageClient_loggingLevel = 'INFO'
" let g:LanguageClient_loggingFile =  expand('~/.local/share/nvim/LanguageClient.log')
" let g:LanguageClient_serverStderr = expand('~/.local/share/nvim/LanguageServer.log')

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['prettier', 'eslint'],
\   'typescriptreact': ['prettier', 'eslint'],
\   'css': ['prettier'],
\   'scss': ['prettier'],
\   'html': ['prettier'],
\   'json': ['prettier'],
\}

let g:ale_linters = {
      \ 'clojure': ['clj-kondo', 'joker']
      \}

nmap <Leader>f <Plug>(ale_fix)

let g:user_emmet_expandabbr_key = '<C-e>'
